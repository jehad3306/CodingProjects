#include <stdio.h>
#include <openssl/bn.h>

#define NBITS 256


void printBN(char *msg, BIGNUM * a)
{
    // Convert the BIGNUM to number string
    char * number_str = BN_bn2dec(a);
    
    // Print out the number string
    printf("%s %s\n", msg, number_str);
    
    // Free the dynamically allocated memory
    OPENSSL_free(number_str);
}


int main() {

 // ------------------ Task 1-------------  
    
    BN_CTX *ctx = BN_CTX_new();

    // Declaring variables	
    BIGNUM *p = BN_new();
    BIGNUM *q = BN_new();
    BIGNUM *e = BN_new();
    
    BIGNUM *n = BN_new();
    
    BIGNUM *phi_n = BN_new();
    
    BIGNUM *p_minus_1 = BN_new();
    BIGNUM *q_minus_1 = BN_new();
    
    BIGNUM *one = BN_new();
    
    BIGNUM *d = BN_new();
    
    // Setting the variable one = 1 in a BIGNUM datatype
    BN_set_word(one, 1);
    
    
    
    
    // Converting the hexadecimal strings to BIGNUM
    BN_hex2bn(&p, "F7E75FDC469067FFDC4E847C51F452DF");
    BN_hex2bn(&q, "E85CED54AF57E53E092113E62F436F4F");
    BN_hex2bn(&e, "0D88C3");
    
    // Definition of n
    BN_mul(n, p, q, ctx);
    
    // Defining Phi_n = (p - 1 ) * (q - 1)
    BN_sub(p_minus_1, p, one);
    BN_sub(q_minus_1, q, one);
    BN_mul(phi_n, p_minus_1, q_minus_1, ctx);
   	
    // Defining d which is the inverse of e mod n = 1	
    BN_mod_inverse(d, e, phi_n, ctx);
    
    // Deallocating memory spaces 
    BN_free(p);
    BN_free(q);
    BN_free(e);
    BN_free(n);
    BN_free(one);
    BN_free(phi_n);
    BN_free(q_minus_1);
    BN_free(p_minus_1);
    BN_free(d);


    return 0;
}